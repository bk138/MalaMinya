!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
BT_SIZE	Toolbar.h	/^const int BT_SIZE = 30;$/;"	v
ColorButton	ColorButton.cpp	/^ColorButton::ColorButton(XConn* x11, Window parent, int r, int g, int b)$/;"	f	class:ColorButton
ColorButton	ColorButton.h	/^class ColorButton $/;"	c
DBG	logger.h	32;"	d
DBG	logger.h	34;"	d
DEBUG	logger.h	27;"	d
DEBUG_VERBOSE	logger.h	28;"	d
ERASER	Pointer.h	/^    ERASER$/;"	e	enum:pointer_modes
ERR	logger.h	44;"	d
ERR	logger.h	46;"	d
ERROR	logger.h	29;"	d
Error	Error.cpp	/^Error::Error(gchar* message)$/;"	f	class:Error
Error	Error.h	/^class Error $/;"	c
HEIGHT	MalaMinya.h	/^const int HEIGHT = WIDTH;$/;"	v
IMAGEPATH	MalaMinya.h	37;"	d
IMAGEPATH	MalaMinya.h	39;"	d
ImageFromFile	Util.cpp	/^Magick::Image* Util::ImageFromFile(char* file)$/;"	f	class:Util
ImageToXImage	Util.cpp	/^XImage* Util::ImageToXImage(Display* dpy, int screen, Magick::Image* image)$/;"	f	class:Util
MENUHEIGHT	MalaMinya.h	/^const int MENUHEIGHT = BT_SIZE;$/;"	v
MENUWIDTH	MalaMinya.h	/^const int MENUWIDTH = BT_SIZE * 4;$/;"	v
MalaMinya	MalaMinya.cpp	/^MalaMinya::MalaMinya(char* display)$/;"	f	class:MalaMinya
MalaMinya	MalaMinya.h	/^class MalaMinya {$/;"	c
NO_USERS	MalaMinya.h	/^const int NO_USERS = 8;$/;"	v
PEN	Pointer.h	/^    PEN,$/;"	e	enum:pointer_modes
Pointer	Pointer.cpp	/^Pointer::Pointer(int id, XEventClass* evclasses, XImage* icon)$/;"	f	class:Pointer
Pointer	Pointer.h	/^class Pointer {$/;"	c
TRACE	logger.h	38;"	d
TRACE	logger.h	40;"	d
Toolbar	Toolbar.cpp	/^Toolbar::Toolbar(MalaMinya* mm, XConn* x11, Window menuswin, Magick::Image* img_icon)$/;"	f	class:Toolbar
Toolbar	Toolbar.h	/^class Toolbar {$/;"	c
Util	Util.h	/^class Util $/;"	c
WIDTH	MalaMinya.h	/^const int WIDTH = BT_SIZE * 20;$/;"	v
XConn	XConn.cpp	/^XConn::XConn(char* host) $/;"	f	class:XConn
XConn	XConn.h	/^class XConn {$/;"	c
XI_MOTION	Pointer.h	/^    XI_MOTION = 0,$/;"	e	enum:event_classes
XI_PRESS	Pointer.h	/^    XI_PRESS = 1,$/;"	e	enum:event_classes
XI_RELEASE	Pointer.h	/^    XI_RELEASE = 2$/;"	e	enum:event_classes
__COLORBUTTON_H___	ColorButton.h	23;"	d
__ERROR_H__	Error.h	24;"	d
__LOGGER_H__	logger.h	24;"	d
__MALAMINYA_H__	MalaMinya.h	24;"	d
__TOOLBAR_H__	Toolbar.h	24;"	d
__USER_H__	Pointer.h	24;"	d
__UTIL_H__	Util.h	28;"	d
__XCONN_H__	XConn.h	23;"	d
backbuffer	MalaMinya.h	/^        Pixmap backbuffer;$/;"	m	class:MalaMinya
black	XConn.h	/^        long black;$/;"	m	class:XConn
btsize	Toolbar.h	/^        int  btsize;$/;"	m	class:Toolbar
buffer	MalaMinya.h	/^        GC buffer;$/;"	m	class:MalaMinya
canvas	MalaMinya.h	/^        GC canvas;$/;"	m	class:MalaMinya
canvaswin	MalaMinya.h	/^        Window canvaswin;$/;"	m	class:MalaMinya
cbuttons	MalaMinya.h	/^        vector<ColorButton*> cbuttons;$/;"	m	class:MalaMinya
cmap	XConn.h	/^        Colormap cmap;$/;"	m	class:XConn
color	ColorButton.h	/^        XColor color;$/;"	m	class:ColorButton
color	Pointer.h	/^        XColor color;$/;"	m	class:Pointer
color_eraser	Toolbar.h	/^        XColor color_eraser;$/;"	m	class:Toolbar
color_pen	Toolbar.h	/^        XColor color_pen;$/;"	m	class:Toolbar
color_wipe	Toolbar.h	/^        XColor color_wipe;$/;"	m	class:Toolbar
createPointer	MalaMinya.cpp	/^Pointer* MalaMinya::createPointer(int id, XEventClass* evclasses)$/;"	f	class:MalaMinya
createPointerIcon	MalaMinya.cpp	/^XImage* MalaMinya::createPointerIcon(int id)$/;"	f	class:MalaMinya
createToolbar	MalaMinya.cpp	/^Toolbar* MalaMinya::createToolbar(Magick::Image* icon)$/;"	f	class:MalaMinya
depth	XConn.h	/^        int depth;$/;"	m	class:XConn
dev	Pointer.h	/^        XDevice* dev;$/;"	m	class:Pointer
dpy	XConn.h	/^        Display* dpy;$/;"	m	class:XConn
eraser	Toolbar.h	/^        Window eraser;$/;"	m	class:Toolbar
eraser_width	MalaMinya.h	/^        int eraser_width;$/;"	m	class:MalaMinya
evclasses	Pointer.h	/^        XEventClass* evclasses;$/;"	m	class:Pointer
event_classes	Pointer.h	/^enum event_classes {$/;"	g
findColorButton	MalaMinya.cpp	/^ColorButton* MalaMinya::findColorButton(Window win)$/;"	f	class:MalaMinya
findPointer	MalaMinya.cpp	/^Pointer* MalaMinya::findPointer(int id)$/;"	f	class:MalaMinya
findToolbarFromWindow	MalaMinya.cpp	/^Toolbar* MalaMinya::findToolbarFromWindow(Window win)$/;"	f	class:MalaMinya
gc_eraser	Toolbar.h	/^        GC gc_eraser;$/;"	m	class:Toolbar
gc_icon	Toolbar.h	/^        GC gc_icon;$/;"	m	class:Toolbar
gc_pen	Toolbar.h	/^        GC gc_pen;$/;"	m	class:Toolbar
gc_toolbar	Toolbar.h	/^        GC gc_toolbar;$/;"	m	class:Toolbar
gc_wipe	Toolbar.h	/^        GC gc_wipe;$/;"	m	class:Toolbar
getColor	ColorButton.cpp	/^XColor ColorButton::getColor()$/;"	f	class:ColorButton
getColorPixel	Pointer.cpp	/^long Pointer::getColorPixel()$/;"	f	class:Pointer
getDefaults	XConn.cpp	/^void XConn::getDefaults()$/;"	f	class:XConn
getEventClass	Pointer.cpp	/^XEventClass* Pointer::getEventClass(int which)$/;"	f	class:Pointer
getMessage	Error.cpp	/^gchar* Error::getMessage()$/;"	f	class:Error
getMode	Pointer.cpp	/^int Pointer::getMode()$/;"	f	class:Pointer
getPointerImage	MalaMinya.cpp	/^Magick::Image* MalaMinya::getPointerImage(int id)$/;"	f	class:MalaMinya
handleButtonEvent	MalaMinya.cpp	/^void MalaMinya::handleButtonEvent(XDeviceButtonEvent* bev)$/;"	f	class:MalaMinya
handleClick	Toolbar.cpp	/^void Toolbar::handleClick(Pointer* device, Window win)$/;"	f	class:Toolbar
handleConfigure	MalaMinya.cpp	/^void MalaMinya::handleConfigure(XConfigureEvent* ev)$/;"	f	class:MalaMinya
handleMotionEvent	MalaMinya.cpp	/^void MalaMinya::handleMotionEvent(XDeviceMotionEvent* mev)$/;"	f	class:MalaMinya
hasWindow	ColorButton.cpp	/^bool ColorButton::hasWindow(Window win)$/;"	f	class:ColorButton
hasWindow	Toolbar.cpp	/^bool Toolbar::hasWindow(Window win)$/;"	f	class:Toolbar
height	MalaMinya.h	/^        int height;$/;"	m	class:MalaMinya
icon	Pointer.h	/^        XImage* icon;$/;"	m	class:Pointer
icon	Toolbar.h	/^        Window icon;$/;"	m	class:Toolbar
id	Pointer.h	/^        int id ; \/* id is the same as the device id *\/$/;"	m	class:Pointer
id	Toolbar.h	/^        int id;$/;"	m	class:Toolbar
img_eraser	Toolbar.h	/^        Magick::Image* img_eraser;$/;"	m	class:Toolbar
img_icon	Toolbar.h	/^        Magick::Image* img_icon;$/;"	m	class:Toolbar
img_pen	Toolbar.h	/^        Magick::Image* img_pen;$/;"	m	class:Toolbar
img_wipe	Toolbar.h	/^        Magick::Image* img_wipe;$/;"	m	class:Toolbar
init	MalaMinya.cpp	/^void MalaMinya::init()$/;"	f	class:MalaMinya
initColorButtons	MalaMinya.cpp	/^void MalaMinya::initColorButtons()$/;"	f	class:MalaMinya
initDevices	MalaMinya.cpp	/^void MalaMinya::initDevices()$/;"	f	class:MalaMinya
initGUI	MalaMinya.cpp	/^void MalaMinya::initGUI()$/;"	f	class:MalaMinya
initToolbars	MalaMinya.cpp	/^void MalaMinya::initToolbars()$/;"	f	class:MalaMinya
main	main.cpp	/^int main(int argc, char** argv) $/;"	f
menuswin	MalaMinya.h	/^        Window menuswin;$/;"	m	class:MalaMinya
menuswin	Toolbar.h	/^        Window menuswin; \/* the parent window for the toolbars*\/$/;"	m	class:Toolbar
message	Error.h	/^        gchar* message;$/;"	m	class:Error
mode	Pointer.h	/^        int mode; \/* one of pointer_modes *\/$/;"	m	class:Pointer
move	ColorButton.cpp	/^void ColorButton::move(int x, int y)$/;"	f	class:ColorButton
move	Toolbar.cpp	/^void Toolbar::move(int x, int y)$/;"	f	class:Toolbar
parent	ColorButton.h	/^        Window parent;$/;"	m	class:ColorButton
parent	Toolbar.h	/^        MalaMinya* parent;$/;"	m	class:Toolbar
pen	Toolbar.h	/^        Window pen;$/;"	m	class:Toolbar
pen_width	MalaMinya.h	/^        int pen_width;$/;"	m	class:MalaMinya
pointerListDestroy	MalaMinya.cpp	/^void MalaMinya::pointerListDestroy()$/;"	f	class:MalaMinya
pointer_modes	Pointer.h	/^enum pointer_modes {$/;"	g
pointers	MalaMinya.h	/^        map<int, Pointer*> pointers; $/;"	m	class:MalaMinya
registerEvent	ColorButton.cpp	/^void ColorButton::registerEvent(XEventClass* evclass)$/;"	f	class:ColorButton
registerEvents	MalaMinya.cpp	/^void MalaMinya::registerEvents()$/;"	f	class:MalaMinya
registerForEvents	Toolbar.cpp	/^void Toolbar::registerForEvents(XEventClass* evclass)$/;"	f	class:Toolbar
repaint	Toolbar.cpp	/^void Toolbar::repaint()$/;"	f	class:Toolbar
repaintCanvas	MalaMinya.cpp	/^void MalaMinya::repaintCanvas()$/;"	f	class:MalaMinya
repaintToolbars	MalaMinya.cpp	/^void MalaMinya::repaintToolbars()$/;"	f	class:MalaMinya
rescale	Toolbar.cpp	/^void Toolbar::rescale(Magick::Image *magickimg, XImage** ximg, int size)$/;"	f	class:Toolbar
resize	ColorButton.cpp	/^void ColorButton::resize(int w, int h)$/;"	f	class:ColorButton
restrictTo	Toolbar.cpp	/^void Toolbar::restrictTo(int device)$/;"	f	class:Toolbar
root	XConn.h	/^        Window root;$/;"	m	class:XConn
run	MalaMinya.cpp	/^void MalaMinya::run()$/;"	f	class:MalaMinya
screen	XConn.h	/^        int screen;$/;"	m	class:XConn
setButtonSize	Toolbar.cpp	/^void Toolbar::setButtonSize(int size)$/;"	f	class:Toolbar
setColor	Pointer.cpp	/^void Pointer::setColor(XColor color)$/;"	f	class:Pointer
setMode	Pointer.cpp	/^void Pointer::setMode(int mode) $/;"	f	class:Pointer
setVertical	Toolbar.cpp	/^void Toolbar::setVertical(bool vertical)$/;"	f	class:Toolbar
tbListDestroy	MalaMinya.cpp	/^void MalaMinya::tbListDestroy()$/;"	f	class:MalaMinya
toolbar	Toolbar.h	/^        Window toolbar;$/;"	m	class:Toolbar
toolbars	MalaMinya.h	/^        vector<Toolbar*> toolbars;$/;"	m	class:MalaMinya
updatePointerIcons	MalaMinya.cpp	/^void MalaMinya::updatePointerIcons()$/;"	f	class:MalaMinya
vertical	Toolbar.h	/^        bool vertical;$/;"	m	class:Toolbar
vis	XConn.h	/^        Visual* vis;$/;"	m	class:XConn
white	XConn.h	/^        long white;$/;"	m	class:XConn
width	MalaMinya.h	/^        int width;$/;"	m	class:MalaMinya
win	ColorButton.h	/^        Window win;$/;"	m	class:ColorButton
win	MalaMinya.h	/^        Window win;$/;"	m	class:MalaMinya
wipe	MalaMinya.cpp	/^void MalaMinya::wipe()$/;"	f	class:MalaMinya
wipe	Toolbar.h	/^        Window wipe;$/;"	m	class:Toolbar
wm_delete_window	XConn.h	/^        Atom wm_delete_window;$/;"	m	class:XConn
wm_protocols	XConn.h	/^        Atom wm_protocols;$/;"	m	class:XConn
x	Pointer.h	/^        int x; \/* x position of pointer *\/$/;"	m	class:Pointer
x11	ColorButton.h	/^        XConn* x11;$/;"	m	class:ColorButton
x11	MalaMinya.h	/^        XConn* x11;$/;"	m	class:MalaMinya
x11	Toolbar.h	/^        XConn* x11;$/;"	m	class:Toolbar
xi_motion	MalaMinya.h	/^        int xi_motion;$/;"	m	class:MalaMinya
xi_motion	Pointer.cpp	/^int Pointer::xi_motion = 0;$/;"	m	class:Pointer	file:
xi_motion	Pointer.h	/^        static int xi_motion;$/;"	m	class:Pointer
xi_press	MalaMinya.h	/^        int xi_press;$/;"	m	class:MalaMinya
xi_press	Pointer.cpp	/^int Pointer::xi_press = 0;$/;"	m	class:Pointer	file:
xi_press	Pointer.h	/^        static int xi_press;$/;"	m	class:Pointer
xi_release	MalaMinya.h	/^        int xi_release;$/;"	m	class:MalaMinya
xi_release	Pointer.cpp	/^int Pointer::xi_release = 0;$/;"	m	class:Pointer	file:
xi_release	Pointer.h	/^        static int xi_release;$/;"	m	class:Pointer
ximg_eraser	Toolbar.h	/^        XImage* ximg_eraser;$/;"	m	class:Toolbar
ximg_icon	Toolbar.h	/^        XImage* ximg_icon;$/;"	m	class:Toolbar
ximg_pen	Toolbar.h	/^        XImage* ximg_pen;$/;"	m	class:Toolbar
ximg_wipe	Toolbar.h	/^        XImage* ximg_wipe;$/;"	m	class:Toolbar
y	Pointer.h	/^        int y; \/* y position of pointer *\/$/;"	m	class:Pointer
~MalaMinya	MalaMinya.cpp	/^MalaMinya::~MalaMinya()$/;"	f	class:MalaMinya
~Pointer	Pointer.cpp	/^Pointer::~Pointer()$/;"	f	class:Pointer
~XConn	XConn.cpp	/^XConn::~XConn()$/;"	f	class:XConn
